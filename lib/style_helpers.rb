module RCite
  class Style

    # The default options hash. Whenever a method with an
    # `options` parameter is executed, it will merge the `options`
    # hash submitted by the user with this one. This allows style authors
    # to set a global default behaviour for various helper methods, but also
    # allows them to override it in special cases.
    #
    # For details on which options are relevant for which method, see
    # the respective method documentation.
    #
    # @return [Hash] The hash with default options.
    attr_accessor :defaults

    # The default values for the {#defaults} hash. These are loaded if the
    # style does not define some itself using the `default` method.
    # See {#initialize}.
    DEFAULTS = {
      :ordering     => :last_first,
      :delim        => '; ',
      :et_al        => 3,
      :et_al_string => 'et al.',
    }

    # Loads the default options. Style authors may define the method `default`
    # which should return an options hash (see {#defaults}). If they do so,
    # the options from their hash are merged with {DEFAULTS}, whereby the
    # options returned by the `default` method supersede those from
    # `DEFAULTS`.
    def initialize
        @defaults = methods.include?(:default) ? default : {}
        @defaults.merge!(DEFAULTS) {|key, v1, v2| v1}
    end

    # Returns a list of all authors of the given text if any are defined.
    #
    # @param [Hash] options Controls the style of the list generated by this
    #   method.
    #   
    # @option options [:first_last, :last_first] :ordering Controls
    #   the order in which family and given names are printed. If `:first_last`
    #   is given, Mr Theodor zu Guttenberg is printed as
    #   "Theodor zu Guttenberg". For `:last_first` it's
    #   "zu Guttenberg, Theodor".
    # @option options [String] :delim The list delimiter.
    # @option options [Integer] :et_al The maximum number of persons that are
    #   listed. If there are more person, `:et_al_string` is added to the end
    #   of the list.
    # @option options [String] :et_al_string The term that is appended when
    #   more than `:et_al` persons are given.
    # 
    # @return [String, nil] The list of authors, or `nil` if the bibliographic
    #   data for this text defines none.
    def authors(options = {})
      authors_or_editors(@text[:author], options)
    end

    alias author authors

    # Returns a list of all editors of the given text if any are defined.
    #
    # @param (see #authors)
    # @option (see #authors)
    # @return [String,nil] The list of editors, or `nil` if the bibliographic
    #   data for this text defines none.
    def editors(options = {})
      authors_or_editors(@text[:editor], options)
    end

    alias editor editors

    # Returns the year in which the text was issued.
    #
    # @return [String, nil] The year, or `nil` if it is not defined.
    def year
      @text[:issued]['date-parts'][0][0].to_s
    end

    alias issued_year year

    # Returns the month in which the text was issued.
    #
    # @return [String, nil] The month, or `nil` if it is not defined.
    def month
      @text[:issued]['date-parts'][0][1].to_s
    end

    alias issued_month month

    #=========================== BEGIN PRIVATE ================================

    private

    def authors_or_editors(list, options = {})
      return if list == nil
      merge_defaults(options)

      list.map! do |person|
        string = ''
        case options[:ordering]
          when :last_first
            string << list([person[:dropping_particle], person[:family]], " ")
            string << ", #{person[:given]}" if person[:given]
          when :first_last
            string << list([person[:given], person[:dropping_particle], \
                            person[:family]], " ")
        end
        string
      end

      print_et_al = false
      max_num_of_persons = options[:et_al]
      if max_num_of_persons && list.size > max_num_of_persons
        list = list[0..(max_num_of_persons-1)]
        print_et_al = true
      end

      string = list(list, options[:delim])

      string << " " + options[:et_al_string] if print_et_al
      return string
    end

    def merge_defaults(options)
      options.merge!(@defaults) { |key, v1, v2| v1 } if options && defaults
    end

    def list(list, delim)
      list.compact.join(delim)
    end

  end
end
